salary = 78000,
in_union = TRUE
)
rm(person)
rm(list = ls())
erson <- list(
first_name = "Ada",
last_name = "Gomez",
job = "Programmer",
salary = 78000,
in_union = TRUE
)
rm(list = ls())
person <- list(
first_name = "Ada",
last_name = "Gomez",
job = "Programmer",
salary = 78000,
in_union = TRUE
)
last_name
name_to_use <- "last_name"
person[[name_to_use]]
summary(person)
person <- list(
first_name = "Ada",
last_name = "Gomez",
job = "Programmer",
salary = 78000,
in_union = TRUE
)
name_to_use <- "last_name"
person[[name_to_use]]
person$age <- 44
person
person$age <- c(44,23)
person
person$age[2] <- NA
person
person$age <- 44
person
person$first_name <- NULL
person
a <- c(1,2,3)
a[3] <- NULL
a <- c(a[1:2],NULL)
a
rm(list = ls())
# Create a vector `my_breakfast` of everything you ate for breakfast
my_breakfast <- "nothing"
# Create a vector `my_lunch` of everything you ate (or will eat) for lunch
my_lunch <- c("Gulasch","Nudel")
# Create a list `meals` that has contains your breakfast and lunch
meals <- list(my_breakfast,my_lunch)
# Create a vector `my_lunch` of everything you ate (or will eat) for lunch
my_lunch <- c("Gulasch","Nudeln")
meals
me
# Add a "dinner" element to your `meals` list that has what you plan to eat
# for dinner
meals[[3]] <- "Kuchen"
# Create a list `meals` that has contains your breakfast and lunch
meals <- list(breakfast = my_breakfast,
lunch = my_lunch)
# Add a "dinner" element to your `meals` list that has what you plan to eat
# for dinner
meals <- list(meals, dinner = "Kuchen")
# Add a "dinner" element to your `meals` list that has what you plan to eat
# for dinner
meals <- list(meals, list(dinner = "Kuchen"))
# Create a list `meals` that has contains your breakfast and lunch
meals <- list(breakfast = my_breakfast,
lunch = my_lunch)
# Add a "dinner" element to your `meals` list that has what you plan to eat
# for dinner
meals <- list(meals, list(dinner = "Kuchen"))
meals <- list(breakfast = my_breakfast,
lunch = my_lunch)
# Add a "dinner" element to your `meals` list that has what you plan to eat
# for dinner
meals$dinner <- "Kuchen"
# Use dollar notation to extract your `dinner` element from your list
# and save it in a vector called 'dinner'
dinner <- meals$dinner
# Use double-bracket notation to extract your `lunch` element from your list
# and save it in your list as the element at index 5 (no reason beyond practice)
meals[[5]] <- meals[[2]]
# Use single-bracket notation to extract your breakfast and lunch from your list
# and save them to a list called `early_meals`
early_meals <- list(meals[1],meals[2])
# Create a list that has the number of items you ate for each meal
# Hint: use the `lappy()` function to apply the `length()` function to each item
lapply(meals,length)
# Create a list that has the number of items you ate for each meal
# Hint: use the `lappy()` function to apply the `length()` function to each item
lapply(meals[1:3],length)
# Create a list that has the number of items you ate for each meal
# Hint: use the `lappy()` function to apply the `length()` function to each item
lapply(meals[[1:3],length)
# Create a list that has the number of items you ate for each meal
# Hint: use the `lappy()` function to apply the `length()` function to each item
lapply(meals[[1:3]],length)
# Create a list that has the number of items you ate for each meal
# Hint: use the `lappy()` function to apply the `length()` function to each item
lapply(meals[1:3],length)
add_pizza <- function(meal_vector){
c(meal_vector,"Pizza")
}
add_pizza(meals[[2]])
# Create a vector `better_meals` that is all your meals, but with pizza!
lapply(meals[[1:3]], add_pizza)
# Create a vector `better_meals` that is all your meals, but with pizza!
lapply(meals[1:3], add_pizza)
# Create a vector `better_meals` that is all your meals, but with pizza!
sapply(meals[[1:3], add_pizza)
# Create a vector `better_meals` that is all your meals, but with pizza!
sapply(meals[[1:3]], add_pizza)
# Create a vector `better_meals` that is all your meals, but with pizza!
sapply(meals[1:3], add_pizza)
# Create a vector `better_meals` that is all your meals, but with pizza!
is.vector(sapply(meals[1:3], add_pizza))
rm(list = ls())
# Create a *list* of 10 random numbers. Use the `runif()` function to make a
# vector of random numbers, then use `as.list()` to convert that to a list
rand_list <- list(as.list(runif(10)))
# Create a *list* of 10 random numbers. Use the `runif()` function to make a
# vector of random numbers, then use `as.list()` to convert that to a list
rand_list <- as.list(runif(10))
# Use `lapply()` to apply the `round()` function to each number, rounding it to
# the nearest 0.1 (one decimal place)
rand_list <- lapply(rand_list)
# Use `lapply()` to apply the `round()` function to each number, rounding it to
# the nearest 0.1 (one decimal place)
rand_list <- lapply(rand_list,round,1)
# Create a variable 'sentence' that contains a sentence of text (something
# longish). Make the sentence lowercase; you can use a function to help.
sentence <- tolower("Das ist ein längerer Testsatz, der vielleicht noch länger sein könnte.")
# Use the `strsplit()` function to split the sentence into a vector of letters.
# Hint: split on `""` to split every character
# Note: this will return a _list_ with 1 element (which is the vector of letters)
strsplit(sentence,"")
# Use the `strsplit()` function to split the sentence into a vector of letters.
# Hint: split on `""` to split every character
# Note: this will return a _list_ with 1 element (which is the vector of letters)
split_list <- strsplit(sentence,"")
# Extract the vector of letters from the resulting list
split_vector <- as.vector(split_list)
# Extract the vector of letters from the resulting list
split_vector <- unlist(split_list)
# Use the `unique()` function to get a vector of unique letters
unique_letters <- unique(split_vector)
unique_letters
count_occurrences <- function(letter, vector_letters){
length(vector_letters[vector_letters == letter])
}
count_occurrences("a",c("a","b","a"))
# Call your `count_occurrences()` function to see how many times the letter 'e'
# is in your sentence.
count_occurrences("e",split_vector)
split_vector
# Use `sapply()` to apply your `count_occurrences()` function to each unique
# letter in the vector to determine their frequencies.
# Convert the result into a list (using `as.list()`).
unique_occurrences <- as.list(sapply(split_vector,count_occurrences,vector_letters=split_vector))
unique_occurrences
# Use `sapply()` to apply your `count_occurrences()` function to each unique
# letter in the vector to determine their frequencies.
# Convert the result into a list (using `as.list()`).
unique_occurrences <- sapply(split_vector,count_occurrences,vector_letters=split_vector)
unique_occurrences
# Use `sapply()` to apply your `count_occurrences()` function to each unique
# letter in the vector to determine their frequencies.
# Convert the result into a list (using `as.list()`).
unique_occurrences <- as.list(sapply(split_vector,count_occurrences,vector_letters=split_vector))
# Print the resulting list of frequencies
print(unique_occurrences)
rm(list=LS())
rm(list=ls())
cost <- c(15.5,17,17,14,12,23)
shirt_sizes <- c("small","medium","small","large","medium","large")
shirt_sizes_factor <- as.factor(shirt_sizes)
print(shirt_sizes_factor)
summary(shirt_sizes_factor)
round(summary(shirt_sizes_factor)/length(shirt_sizes_factor),1)
t(round(summary(shirt_sizes_factor)/length(shirt_sizes_factor),1))
cost <- c(15.5,17,17,14,12,23)
shirts_factor <- data.frame(c(shirt_sizes,cost))
?tapply
shirt_size_frames <- split(shirt_sizes_factor, shirt_sizes_factor$shirt_sizes)
shirts_factor <- data.frame(c(shirt_sizes,cost))
shirts_factor
shirts_factor <- data.frame(list(c(shirt_sizes_factor,cost)))
shirts_factor
shirts_factor <- data.frame(shirt_sizes_factor,cost)
shirts_factor
shirt_size_frames <- split(shirt_sizes_factor, shirt_sizes_factor$shirt_sizes)
shirt_size_frames <- split(shirts_factor, shirt_sizes_factor$shirt_sizes)
shirt_sizes <- c("small","medium","small","large","medium","large")
shirt_sizes_factor <- as.factor(shirt_sizes)
print(shirt_sizes_factor)
summary(shirt_sizes_factor)
round(summary(shirt_sizes_factor)/length(shirt_sizes_factor),1)
t(round(summary(shirt_sizes_factor)/length(shirt_sizes_factor),1))
cost <- c(15.5,17,17,14,12,23)
shirts_factor <- data.frame(shirt_sizes_factor,cost)
shirt_size_frames <- split(shirts_factor, shirt_sizes_factor$shirt_sizes)
shirt_size_frames <- split(shirts_factor, shirts_factor$shirt_sizes)
shirt_size_frames
tapply(shirts_factor$cost,shirts_factor$shirt_sizes_factor,mean)
rm(list=ls())
# Create a vector of the number of points the Seahawks scored in the first 4 games
# of the season (google "Seahawks" for the scores!)
seahawks_points <- c(17,23,21,28)
# Create a vector of the number of points the Seahwaks have allowed to be scored
# against them in each of the first 4 games of the season
seahawks_points_against <- c(9,28,20,26)
# Combine your two vectors into a dataframe called `games`
games <- data.frame(seahawks_points,seahawks_points_against)
# Create a new column "diff" that is the difference in points between the teams
# Hint: recall the syntax for assigning new elements (which in this case will be
# a vector) to a list!
games$diff <- games$seahawks_points-games$seahawks_points_against
# Create a new column "won" which is TRUE if the Seahawks won the game
games$won <- games$seahawks_points > games$seahawks_points_against
# Create a vector of the opponent names corresponding to the games played
opp_names <- c("Philadelphia", "Green Bay", "Cincinatti", "Pittsburg")
# Assign your dataframe rownames of their opponents
row.names(games) <- opp_names
# View your data frame to see how it has changed!
print(games)
rm(list=ls())
wd()
getwd
getwd()
# Create a vector of 100 employees ("Employee 1", "Employee 2", ... "Employee 100")
# Hint: use the `paste()` function and vector recycling to add a number to the word
# "Employee"
employees <- paste("Employee ", 1:100,sep="")
# Create a vector of 100 random salaries for the year 2017
# Use the `runif()` function to pick random numbers between 40000 and 50000
salaries_2017 <- round(runif(100, 40000, 50000),0)
# Create a vector of 100 annual salary adjustments between -5000 and 10000.
# (A negative number represents a salary decrease due to corporate greed)
# Again use the `runif()` function to pick 100 random numbers in that range.
salary_adjustments_2018 <- round(runif(100, -5000, 10000),0)
# Create a data frame `salaries` by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salaries <- data.frame(employees, salaries_2017, salary_adjustments_2018)
# Create a data frame `salaries` by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salaries <- data.frame(employees, salaries_2017, salary_adjustments_2018. stringsAsFactors = FALSE)
# Create a data frame `salaries` by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salaries <- data.frame(employees, salaries_2017, salary_adjustments_2018, stringsAsFactors = FALSE)
# Add a column to the `salaries` data frame that represents each person's
# salary in 2018 (e.g., with the salary adjustment added in).
salaries$salaries_2018 <- salaries$salaries_2017+salaries$salary_adjustments_2018
# Add a column to the `salaries` data frame that has a value of `TRUE` if the
# person got a raise (their salary went up)
salaries$got_raise <- salaries$salary_adjustments_2018 > 0
# What was the 2018 salary of Employee 57
salaries[57,]
# How many employees got a raise?
dim(salaries[salaries$got_raise = TRUE,])
# How many employees got a raise?
dim(salaries[salaries$got_raise,])
# How many employees got a raise?
dim(salaries[salaries$got_raise==T,])
# What was the dollar value of the highest raise?
max(salaries$salary_adjustments_2018)
# What was the "name" of the employee who received the highest raise?
salaries$employees[salaries$salary_adjustments_2018==max(salaries$salary_adjustments_2018)]
# Write a .csv file of your salary data to your working directory
write.csv("salaries")
?write.csv
# Write a .csv file of your salary data to your working directory
write.csv(salaries,"salaries.csv")
# Write a .csv file of your salary data to your working directory
write.csv(salaries,"salaries.csv",row.names = F)
# Load R's "USPersonalExpenditure" dataset using the `data()` function
# This will produce a data frame called `USPersonalExpenditure`
data("USPersonalExpenditure")
rm(list=ls())
# Load R's "USPersonalExpenditure" dataset using the `data()` function
# This will produce a data frame called `USPersonalExpenditure`
data("USPersonalExpenditure")
# The variable `USPersonalExpenditure` is now accessible to you. Unfortunately,
# it's not a data frame (it's actually what is called a matrix)
# Test this using the `is.data.frame()` function
is.data.frame(USPersonalExpenditure)
status(USPersonalExpenditure)
summars(USPersonalExpenditure)
summary(USPersonalExpenditure)
# Luckily, you can pass the USPersonalExpenditure variable as an argument to the
# `data.frame()` function to convert it a data farm. Do this, storing the
# result in a new variable
data_frame <- data.frame(USPersonalExpenditure)
# What are the column names of your dataframe?
col.names(data_frame)
# What are the column names of your dataframe?
colnames(data_frame)
# What are the row names of your dataframe?
rownames(data_frame)
gsub("X","$",colnames(data_frame))
# Add a column "category" to your data frame that contains the rownames
data_frame$category <- rownames(data_frame)
colnames(data_frame) <- gsub("X","$",colnames(data_frame))
# What are the row names of your dataframe?
rownames(data_frame)
# How much money was spent on personal care in 1940?
data_frame[data_frame$category=="personal care", data_frame$`$1940`]
colnames(data_frame) <- gsub("X","",colnames(data_frame))
colnames(data_frame) <- paste(colnames(data_frame),"$",sep="")
colnames(data_frame) <- gsub("$","",colnames(data_frame))
colnames(data_frame) <- paste(colnames(data_frame),"$",sep="")
data_frame <- data.frame(USPersonalExpenditure)
# What are the column names of your dataframe?
colnames(data_frame)
## Consider: why are they so strange? Think about whether you could use a number
## like 1940 with dollar notation!
colnames(data_frame) <- gsub("X","",colnames(data_frame))
colnames(data_frame) <- paste(colnames(data_frame),"$",sep="")
# How much money was spent on personal care in 1940?
data_frame[data_frame$category=="personal care", data_frame$1940$]
# How much money was spent on personal care in 1940?
data_frame$`1940$`[data_frame$category=="personal care"]
data_frame
# How much money was spent on personal care in 1940?
data_frame$`1940$`[data_frame$category=="Personal Care"]
# How much money was spent on personal care in 1940?
data_frame$1940$[data_frame$category=="Personal Care"]
# Exercise 3: working with built-in data sets
# Load R's "USPersonalExpenditure" dataset using the `data()` function
# This will produce a data frame called `USPersonalExpenditure`
data("USPersonalExpenditure")
# The variable `USPersonalExpenditure` is now accessible to you. Unfortunately,
# it's not a data frame (it's actually what is called a matrix)
# Test this using the `is.data.frame()` function
is.data.frame(USPersonalExpenditure)
# Luckily, you can pass the USPersonalExpenditure variable as an argument to the
# `data.frame()` function to convert it a data farm. Do this, storing the
# result in a new variable
data_frame <- data.frame(USPersonalExpenditure)
# What are the column names of your dataframe?
colnames(data_frame)
# What are the row names of your dataframe?
rownames(data_frame)
# Add a column "category" to your data frame that contains the rownames
data_frame$category <- rownames(data_frame)
# What are the row names of your dataframe?
rownames(data_frame)
# Add a column "category" to your data frame that contains the rownames
data_frame$category <- rownames(data_frame)
# How much money was spent on personal care in 1940?
data_frame$X1940[data_frame$category=="Personal Care"]
# How much money was spent on Food and Tobacco in 1960?
data_frame$X1960[data_frame$category=="Food and Tobacco"]
# What was the highest expenditure category in 1960?
data_frame$category[data_frame$X1960==max(data_frame$X1960)]
lowest_category <- function(categories,spendings){
categories[spendings==min(spendings)]
}
lowest_category(data_frame$category,data_frame$X1950)
data_frame
testvec[4] <- testvec[5]
lowest_category(data_frame$category,testvec)
testvec <- data_frame$X1950
testvec[4] <- testvec[5]
lowest_category(data_frame$category,testvec)
# Using your function, determine the lowest spending category of each year
# Hint: use the `sapply()` function to apply your function to a vector of years
sapply(data_frame, lowest_category)
# Using your function, determine the lowest spending category of each year
# Hint: use the `sapply()` function to apply your function to a vector of years
sapply(data_frame, lowest_category)
?sapply
rm(list=ls())
setwd("C:/Users/chris/programming_skills_book/book-exercises/chapter-10-exercises/exercise-4")
?read.csv
# Use the `read.csv()` functoin to read the data from the `data/gates_money.csv`
# file into a variable called `grants` using the `read.csv()`
# Be sure to set your working directory in RStudio, and do NOT treat strings as
# factors!
grants <- read.csv("data/gates_money.csv", header = T)
# Use the View function to look at the loaded data
View(grants)
# Use the View function to look at the loaded data
View(grants)
# Create a variable `organization` that contains the `organization` column of
# the dataset
organization <- grants$organization
# Confirm that the "organization" column is a vector using the `is.vector()`
# function.
# This is a useful debugging tip if you hit errors later!
is.vector(organization)
# What was the mean grant value?
mean(grants$total_amount)
# What was the dollar amount of the largest grant?
max(grants$total_amount)
# What was the dollar amount of the smallest grant?
min(grants$total_amount)
# Which organization received the largest grant?
organization[grants$total_amount==max(grants$total_amount)]
# Which organization received the smallest grant?
organization[grants$total_amount==min(grants$total_amount)]
# Use the View function to look at the loaded data
View(grants)
is.Date()
# How many grants were awarded in 2010?
## When you convert your variable to Date:
date <-  as.Date(grants$Grant.start.date,'%m/%d/%Y')
date
## you can then cut out the elements you want and make new variables, like year:
year <- as.numeric(format(date,'%Y'))
year
length(grants$Grant.start.date[year==2010])
mean(grants$total_amount[year==2010])
rm(list=ls())
setwd("C:/Users/chris/programming_skills_book/book-exercises/chapter-10-exercises/exercise-5")
?read.csv
# Read in the female baby names data file found in the `data` folder into a
# variable called `names`. Remember to NOT treat the strings as factors!
names <- read.csv("date/female_names.csv",header = T,row.names = T, stringsAsFactors = F)
# Read in the female baby names data file found in the `data` folder into a
# variable called `names`. Remember to NOT treat the strings as factors!
names <- read.csv("data/female_names.csv",header = T,row.names = T, stringsAsFactors = F)
view(names)
View(names)
# Read in the female baby names data file found in the `data` folder into a
# variable called `names`. Remember to NOT treat the strings as factors!
names <- read.csv("data/female_names.csv",header = T,row.names = T, stringsAsFactors = F)
# Read in the female baby names data file found in the `data` folder into a
# variable called `names`. Remember to NOT treat the strings as factors!
names <- read.csv("data/female_names.csv",header = T,stringsAsFactors = F)
View(names)
# Read in the female baby names data file found in the `data` folder into a
# variable called `names`. Remember to NOT treat the strings as factors!
names <- read.csv("data/female_names.csv",header = T, row.names = 1, stringsAsFactors = F)
View(names)
View(names)
# Create a data frame `names_2013` that contains only the rows for the year 2013
names_2013 <- names[names$year==2013,]
is.data.frame(names_2013)
# What was the most popular female name in 2013?
frequency(names_2013$name)
# What was the most popular female name in 2013?
freq(names_2013$name)
# What was the most popular female name in 2013?
table(names_2013$name)
max(table(names_2013$name))
?table
?count
??count
??frequency
# What was the most popular female name in 2013?
summary(names_2013$name)
??apply
?lapply
?hist
# What was the most popular female name in 2013?
hist(names_2013$name, plot = F)
# What was the most popular female name in 2013?
table(names_2013$name)
# What was the most popular female name in 2013?
summary(table(names_2013$name))
# What was the most popular female name in 2013?
summary(as.factor(names_2013$name))
# What was the most popular female name in 2013?
View(names_2013)
# What was the most popular female name in 2013?
names_2013$name[names_2013$prop == max(names_2013$prop)]
plot(names$prop)
plot(names$prop)
hist(names$prop)
plot(density(names$prop))
most_popular_in_year <- function(year){
names_tmp <- names[names$year==year,]
names_tmp$name[names_tmp$prop == max(names_tmp$prop)]
}
most_popular_in_year(2013)
?sapply
sapply(seq(min(names$year),max(names$year)),most_popular_in_year)
overview_years <- data.frame(names$year, sapply(seq(min(names$year),max(names$year)),most_popular_in_year))
print(overview_years)
overview_years <- data.frame(levels(as.factor(names$year)), sapply(seq(min(names$year),max(names$year)),most_popular_in_year))
overview_years
colnames(overview_years) <- c("Year","Name")
overview_years <- data.frame(levels(as.factor(names$year)), sapply(seq(min(names$year),max(names$year)),most_popular_in_year))
print(overview_years)
overview_years <- data.frame(levels(as.factor(names$year)), sapply(seq(min(names$year),max(names$year)),most_popular_in_year))
colnames(overview_years) <- c("Year","Name")
print(overview_years)
# What was the most popular female name in 1994?
most_popular_in_year(1994)
number_in_million <- function(name, year){
round(names$prop[names$name==name && names$year==year]*1000000,0)
}
# How many babies out of 1 million had the name 'Laura' in 1995?
number_in_million("Laura",1995)
number_in_million <- function(name, year){
round(names$prop[names$name==name & names$year==year]*1000000,0)
}
# How many babies out of 1 million had the name 'Laura' in 1995?
number_in_million("Laura",1995)
# How many babies out of 1 million had your name in the year you were born?
number_in_million("Christoph",1977)
# How many babies out of 1 million had your name in the year you were born?
number_in_million("Christopher",1977)
# How many babies out of 1 million had your name in the year you were born?
number_in_million("Manja",1975)
# How many babies out of 1 million had your name in the year you were born?
number_in_million("Chris",1977)
