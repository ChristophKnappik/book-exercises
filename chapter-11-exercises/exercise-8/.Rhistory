filter(year=1995) %>%
filter(efficiency=max(efficiency)) %>%
select(model)
most_efficient_honda_model_1995 <- vehicles %>%
mutate(efficiency = (hwy+cty)/2) %>%
filter(make=="Honda") %>%
filter(year==1995) %>%
filter(efficiency==max(efficiency)) %>%
select(model)
most_efficient_honda_model_1995
?glimpse
glimpes(vehicles)
glimpse(vehicles)
summarise(vehicles)
summarize(vehicles)
rm(list = ls())
#install.packages("dplyr")
library("dplyr")
# Install (if needed) and load the "fueleconomy" package
#install.packages('devtools')
#devtools::install_github("hadley/fueleconomy")
library("fueleconomy")
library("dplyr")
# Install (if needed) and load the "fueleconomy" package
#install.packages('devtools')
#devtools::install_github("hadley/fueleconomy")
library("fueleconomy")
solution_temp_vars(vehicle_data){
}
solution_temp_vars <- function(vehicle_data){
vehicle_data_2015 <- filter(vehicle_data; year==2015)
vehicle_data_2015_Acura <- filter(vehicle_data_2015;make=="Acura")
View(vehicle_data_2015_Acura)
}
solution_temp_vars(vehicles)
solution_temp_vars <- function(vehicle_data=vehicles){
vehicle_data_2015 <- filter(vehicle_data, year==2015)
vehicle_data_2015_Acura <- filter(vehicle_data_2015;make=="Acura")
View(vehicle_data_2015_Acura)
}
solution_temp_vars <- function(vehicle_data=vehicles){
vehicle_data_2015 <- filter(vehicle_data, year==2015)
vehicle_data_2015_Acura <- filter(vehicle_data_2015;make=="Acura")
View(vehicle_data_2015_Acura)
}
solution_temp_vars <- function(vehicle_data=vehicles){
vehicle_data_2015 <- filter(vehicle_data, year==2015)
vehicle_data_2015_Acura <- filter(vehicle_data_2015,make=="Acura")
View(vehicle_data_2015_Acura)
}
solution_temp_vars <- function(vehicle_data=vehicles){
vehicle_data_2015 <- filter(vehicle_data, year==2015)
vehicle_data_2015_Acura <- filter(vehicle_data_2015,make=="Acura")
vehicle_data_2015_Acura_best_hwy <- filter(vehicle_data_2015_Acura,hwy==max(hwy))
select(vehicle_data_2015_Acura_best_hwy,model)
}
glimpse(vehicles)
solution_temp_vars <- function(vehicle_data=vehicles){
vehicle_data_2015 <- filter(vehicle_data, year==2015)
vehicle_data_2015_Acura <- filter(vehicle_data_2015,make=="Acura")
vehicle_data_2015_Acura_best_hwy <- filter(vehicle_data_2015_Acura,hwy==max(hwy))
best_model <- select(vehicle_data_2015_Acura_best_hwy,model)
best_model
}
solution_temp_vars <- function(vehicle_data=vehicles){
vehicle_data_2015 <- filter(vehicle_data, year==2015)
vehicle_data_2015_Acura <- filter(vehicle_data_2015,make=="Acura")
vehicle_data_2015_Acura_best_hwy <- filter(vehicle_data_2015_Acura,hwy==max(hwy))
best_model <- select(vehicle_data_2015_Acura_best_hwy,model)
return(best_model)
}
solution_temp_vars <- function(vehicle_data=vehicles){
vehicle_data_2015 <- filter(vehicle_data, year==2015)
vehicle_data_2015_Acura <- filter(vehicle_data_2015,make=="Acura")
vehicle_data_2015_Acura_best_hwy <- filter(vehicle_data_2015_Acura,hwy==max(hwy))
best_model <- select(vehicle_data_2015_Acura_best_hwy,model)
print(best_model)
}
solution_temp_vars()
View(test_data)
test_data <- vehicles %>%
filter(year==2015) %>%
filter(make=="Acura")
View(test_data)
?filter
?select
solution_nested <- function(vehicle_data=vehicles){
best_model <- select(filter(vehicle_data, year == 2015 & make == "Acura" & hwy == max(select(filter(vehicle_data,year==2015 & make=="Acura"),hwy))),model)
print(best_model)
}
solution_temp_vars()
solution_nested()
solution_piping <- function(vehicle_data=vehicles){
best_model <- vehicle_data %>%
filter(year == 2015) %>%
filter(make == "Acura") %>%
filter(hwy == max(hwy)) %>%
select(model)
print(best_model)
}
solution_piping()
start_time <- Sys.time()
?for
start_time <- Sys.time()
for (i in 1:1000) {
solution_temp_vars()
}
end_time <- Sys.time()
duration_vector[1] <- end_time-start_time
start_time <- Sys.time()
for (i in 1:1000) {
solution_nested()
}
end_time <- Sys.time()
duration_vector[2] <- end_time-start_time
start_time <- Sys.time()
for (i in 1:1000) {
solution_piping()
}
end_time <- Sys.time()
duration_vector[3] <- end_time-start_time
duration_vector <- round(duration_vector,1)
a <- c(1,2,3)
?paste
stopwatch(solution_temp_vars(),solution_nested(),solution_piping())
stopwatch <- function(fun1, fun2, fun3){
starttime <- Sys.time()
for(i in 1:1000) fun1
endtime <- Sys.time()
print(paste("Zeit f端r temp. Variablen:",round(endtime-starttime,2),sep=""))
}
stopwatch(solution_temp_vars(),solution_nested(),solution_piping())
stopwatch <- function(fun1, fun2, fun3){
starttime <- Sys.time()
for(i in 1:1000) fun1
endtime <- Sys.time()
print(paste("Zeit f端r temp. Variablen:",round(endtime-starttime,3),sep=""))
starttime <- Sys.time()
for(i in 1:1000) fun2
endtime <- Sys.time()
print(paste("Zeit f端r nested functions:",round(endtime-starttime,3),sep=""))
starttime <- Sys.time()
for(i in 1:1000) fun3
endtime <- Sys.time()
print(paste("Zeit f端r piping:",round(endtime-starttime,3),sep=""))
}
stopwatch(solution_temp_vars(),solution_nested(),solution_piping())
rm(list = ls())
# Install the `"nycflights13"` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
library(c(nycflights13,dplyr))
# Install the `"nycflights13"` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
library(c("nycflights13","dplyr"))
# Install the `"nycflights13"` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
library(nycflights13)
library(dplyr)
nrow(flights)
ncol(flights)
colnames(flights)
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained or lost while flying (that is: how much of the delay arriving occured
# during flight, as opposed to before departing).
flights <- mutate(flights, delay_during_flight = arr_delay - dep_delay)
summarise(flights$delay_during_flight)
summary(flights$delay_during_flight)
?arrange
# Use `dplyr` to sort your data frame in descending order by the column you just
# created. Remember to save this as a variable (or in the same one!)
flights_sorted <- desc(flights,delay_during_flight)
View(flights_sorted)
?desc
flights_sorted <- arrange(fligts,desc(delay_during_flight))
View(flights_sorted)
flights_sorted <- arrange(flights,desc(delay_during_flight))
View(flights_sorted)
# Make a histogram of the amount of time gained using the `hist()` function
hist(flights_sorted$delay_during_flight)
# On average, did flights gain or lose time?
# Note: use the `na.rm = TRUE` argument to remove NA values from your aggregation
mean(flights_sorted$delay_during_flight)
# On average, did flights gain or lose time?
# Note: use the `na.rm = TRUE` argument to remove NA values from your aggregation
mean(flights_sorted$delay_during_flight, na.rm=T)
?hhist
?hist
# Make a histogram of the amount of time gained using the `hist()` function
hist(flights_sorted$delay_during_flight, breaks=50)
# Make a histogram of the amount of time gained using the `hist()` function
hist(flights_sorted$delay_during_flight, breaks=150)
?select
flights_SEA <- flights %>%
filter(dest == "SEA") %>%
select(origin,dest,delay_during_flight)
View(flights_SEA)
# On average, did flights to SeaTac gain or loose time?
summarize(flights_SEA, mean(delay_during_flight))
# On average, did flights to SeaTac gain or loose time?
summarize(flights_SEA, mean(delay_during_flight, na.rm=T))
summary_JFK_to_SEA <- flights %>%
filter(origin=="JFK") %>%
filter(dest=="SEA") %>%
summarize(mean(air_time, na.rm=T), min(air_time, na.rm=T), max(air_time, na.rm=T)) %>%
print()
summary_JFK_to_SEA <- flights %>%
filter(origin=="JFK") %>%
filter(dest=="SEA") %>%
summarize(round(mean(air_time, na.rm=T),2), min(air_time, na.rm=T), max(air_time, na.rm=T)) %>%
print()
rm(list = ls())
library("nycflights13")
library("dplyr")
# What was the average departure delay in each month?
# Save this as a data frame `dep_delay_by_month`
# Hint: you'll have to perform a grouping operation then summarizing your data
glimpse(flights)
glimpse(airports)
nrow(airports)
dep_delay_by_month <- flights %>%
group_by(month) %>%
select(month,dep_delay)
dep_delay_by_month <- flights %>%
group_by(month) %>%
select(month, dep_delay) %>%
summarize(mean(dep_delay, na.rm = T))
dep_delay_by_month
# Which month had the greatest average departure delay?
month_max_avg_dep_delay <- dep_delay_by_month %>%
filter(dep_delay == max(dep_delay)) %>%
select(month)
dep_delay_by_month <- flights %>%
group_by(month) %>%
select(month, dep_delay) %>%
summarize(mean(dep_delay, na.rm = T))
dep_delay_by_month
source('C:/Users/chris/programming_skills_book/book-exercises/chapter-11-exercises/exercise-5/exercise.R', echo=TRUE)
colnames(dep_delay_by_month)
?rename
month_max_avg_dep_delay <- dep_delay_by_month %>%
filter(dep_delay == max(dep_delay)) %>%
select(month) %>%
rename(mean(dep_delay, na.rm = T) = dep_delay)
month_max_avg_dep_delay <- dep_delay_by_month %>%
filter(dep_delay == max(dep_delay)) %>%
select(month) %>%
rename("mean(dep_delay, na.rm = T)" = "dep_delay")
month_max_avg_dep_delay <- dep_delay_by_month %>%
filter(dep_delay == max(dep_delay)) %>%
select(month) %>%
rename(dep_delay = mean(dep_delay, na.rm = T))
dep_delay_by_month <- flights %>%
group_by(month) %>%
select(month, dep_delay) %>%
summarize(mean(dep_delay, na.rm = T)) %>%
rename(dep_delay = mean(dep_delay, na.rm = T))
dep_delay_by_month
dep_delay_by_month <- flights %>%
group_by(month) %>%
select(month, dep_delay) %>%
summarize(mean(dep_delay, na.rm = T)) %>%
rename(mean(dep_delay, na.rm = T) = dep_delay
dep_delay_by_month
dep_delay_by_month <- flights %>%
group_by(month) %>%
select(month, dep_delay) %>%
summarize(mean(dep_delay, na.rm = T)) %>%
rename(mean(dep_delay, na.rm = T) = dep_delay)
dep_delay_by_month
dep_delay_by_month <- flights %>%
group_by(month) %>%
select(month, dep_delay) %>%
summarize(mean(dep_delay, na.rm = T)) %>%
rename("mean(dep_delay, na.rm = T)" = dep_delay)
dep_delay_by_month
dep_delay_by_month <- flights %>%
group_by(month) %>%
select(month, dep_delay) %>%
summarize(mean(dep_delay, na.rm = T)) %>%
rename(dep_delay = mean(dep_delay, na.rm = T))
dep_delay_by_month
dep_delay_by_month <- flights %>%
group_by(month) %>%
select(month, dep_delay) %>%
summarize(mean(dep_delay, na.rm = T)) %>%
rename(dep_delay = "mean(dep_delay, na.rm = T)")
dep_delay_by_month
month_max_avg_dep_delay <- dep_delay_by_month %>%
filter(dep_delay == max(dep_delay)) %>%
select(month) %>%
print()
# If your above data frame contains just two columns (e.g., "month", and "delay"
# in that order), you can create a scatterplot by passing that data frame to the
# `plot()` function
plot(month_max_avg_dep_delay)
# If your above data frame contains just two columns (e.g., "month", and "delay"
# in that order), you can create a scatterplot by passing that data frame to the
# `plot()` function
plot(dep_delay_by_month)
# To which destinations were the average arrival delays the highest?
# Hint: you'll have to perform a grouping operation then summarize your data
# You can use the `head()` function to view just the first few rows
head(flights)
dest_max_arr_delay <- flights %>%
group_by(dest) %>%
summarise(mean(arr_delay, na.rm = T)) %>%
filter(arr_delay == max(arr_delay)) %>%
select(dest)
dest_max_arr_delay
?summarise
dest_max_arr_delay <- flights %>%
group_by(dest) %>%
summarise(mean_arr_delay = mean(arr_delay, na.rm = T)) %>%
filter(mean_arr_delay == max(mean_arr_delay)) %>%
select(dest)
dest_max_arr_delay
source('C:/Users/chris/programming_skills_book/book-exercises/chapter-11-exercises/exercise-5/exercise.R', echo=TRUE)
print(dest_max_arr_delay)
rm(dest_max_arr_delay)
dest_max_arr_delay <- flights %>%
group_by(dest) %>%
summarise(mean_arr_delay = mean(arr_delay, na.rm = T)) %>%
filter(mean_arr_delay == max(mean_arr_delay)) %>%
select(dest)
rm(dest_max_arr_delay)
library("nycflights13")
library("dplyr")
source('C:/Users/chris/programming_skills_book/book-exercises/chapter-11-exercises/exercise-6/exercise.R', echo=TRUE)
source('C:/Users/chris/programming_skills_book/book-exercises/chapter-11-exercises/exercise-6/exercise.R', echo=TRUE)
head(flights)
# Create a dataframe of the average arrival delays for each _destination_, then
# use `left_join()` to join on the "airports" dataframe, which has the airport
# information
# Which airport had the largest average arrival delay?
avg_arrival_delay <- flights %>%
group_by(dest)
head(airports)
source('C:/Users/chris/programming_skills_book/book-exercises/chapter-11-exercises/exercise-6/exercise.R', echo=TRUE)
left_join
?left_join
avg_arrival_delay_comp <- left_join(avg_arrival_delay, airports, by = c("dest" = "faa"))
avg_arrival_delay_comp <- left_join(avg_arrival_delay, airports, by = c("dest" = "faa"))
select(avg_arrival_delay_comp, arr_delay == max(arr_delay, na.rm = T))
head(avg_arrival_delay)
# Which airport had the largest average arrival delay?
avg_arrival_delay <- flights %>%
group_by(dest) %>%
summarize(arr_delay = mean(arr_delay, na.rm = T))
head(avg_arrival_delay)
avg_arrival_delay_comp <- left_join(avg_arrival_delay, airports, by = c("dest" = "faa"))
select(avg_arrival_delay_comp, arr_delay == max(arr_delay, na.rm = T))
head(avg_arrival_delay_comp)
avg_arrival_delay_comp <- left_join(avg_arrival_delay, airports, by = c("dest" = "faa"))
head(avg_arrival_delay_comp)
select(avg_arrival_delay_comp, arr_delay == max(arr_delay, na.rm = T))
select(avg_arrival_delay_comp, "arr_delay" == max(arr_delay, na.rm = T))
last_error()
?select
avg_arrival_delay_comp %>% select(dest, arrical_delay == max(arrival_delay, na.rm = T))
avg_arrival_delay_comp %>% select(dest, arrival_delay == max(arrival_delay, na.rm = T))
avg_arrival_delay_comp %>% filter(arr_delay==max(arr_delay, na.rm = T)) %>% select(dest)
avg_arrival_delay_comp %>% filter(arr_delay==max(arr_delay, na.rm = T)) %>% select(name)
head(flights)
avg_arr_delay_airline <- flights %>%
group_by(carrier)
avg_arr_delay_airline <- flights %>%
group_by(carrier) %>%
summarise(arr_delay = mean(arr_delay, na.rm = t))
head(avg_arr_delay_airline)
avg_arr_delay_airline <- flights %>%
group_by(carrier) %>%
summarise(arr_delay = mean(arr_delay, na.rm = T))
head(avg_arr_delay_airline)
head(airlines)
avg_arr_delay_airline <- flights %>%
group_by(carrier) %>%
summarise(arr_delay = mean(arr_delay, na.rm = T)) %>%
left_join(airlines, by = c("carrier" = "name")) %>%
filter(arr_delay == min(arr_delay, na.rm = T))
select(name) %>%
print()
avg_arr_delay_airline <- flights %>%
group_by(carrier) %>%
summarise(arr_delay = mean(arr_delay, na.rm = T)) %>%
left_join(airlines, by = c("carrier" = "name")) %>%
filter(arr_delay == min(arr_delay, na.rm = T)) %>%
select(name) %>%
print()
avg_arr_delay_airline <- flights %>%
group_by(carrier) %>%
summarise(arr_delay = mean(arr_delay, na.rm = T)) %>%
left_join(airlines, by = c("carrier" = "name")) %>%
filter(arr_delay == min(arr_delay, na.rm = T)) %>%
select(name)
avg_arr_delay_airline <- flights %>%
group_by(carrier) %>%
summarise(arr_delay = mean(arr_delay, na.rm = T)) %>%
left_join(airlines, by = c("carrier" = "name"))
head(avg_arr_delay_airline)
avg_arr_delay_airline <- flights %>%
group_by(carrier) %>%
summarise(arr_delay = mean(arr_delay, na.rm = T)) %>%
left_join(airlines, by = c("name" = "carrier"))
head(avg_arr_delay_airline
avg_arr_delay_airline <- flights %>%
group_by(carrier) %>%
summarise(arr_delay = mean(arr_delay, na.rm = T)) %>%
left_join(airlines, by = "carrier")
head(avg_arr_delay_airline)
head(airlines)
head(flights)
avg_arr_delay_airline <- flights %>%
group_by(carrier) %>%
summarise(arr_delay = mean(arr_delay, na.rm = T)) %>%
left_join(airlines, by = carrier)
avg_arr_delay_airline <- flights %>%
group_by(carrier) %>%
summarise(arr_delay = mean(arr_delay, na.rm = T)) %>%
left_join(airlines, by = "carrier")
head(avg_arr_delay_airline)
avg_arr_delay_airline <- flights %>%
group_by(carrier) %>%
summarise(arr_delay = mean(arr_delay, na.rm = T)) %>%
left_join(airlines, by = "carrier") %>%
filter(arr_delay == min(arr_delay, na.rm = T))
head(avg_arr_delay_airline)
avg_arr_delay_airline <- flights %>%
group_by(carrier) %>%
summarise(arr_delay = mean(arr_delay, na.rm = T)) %>%
left_join(airlines, by = "carrier") %>%
filter(arr_delay == min(arr_delay, na.rm = T)) %>%
select(name) %>%
print()
head()
rm(list = ls())
# Load the `dplyr` library
library(dplyr)
setwd("C:/Users/chris/programming_skills_book/book-exercises/chapter-11-exercises/exercise-7")
# Use the `read.csv()` function to read in the included data set. Remember to
# save it as a variable.
dat <- read.csv(data/nba_teams_2016)
# Use the `read.csv()` function to read in the included data set. Remember to
# save it as a variable.
dat <- read.csv("data/nba_teams_2016.csv")
head(dat)
nrow(dat)
# Add a column that gives the turnovers to steals ratio (TOV / STL) for each team
dat$turn_steal <- dat$TOV/dat$STL
summary(dat$turn_steal)
?desc
# Sort the teams from lowest turnover/steal ratio to highest
# Which team has the lowest turnover/steal ratio?
dat <- desc(dat, turn_steal)
# Sort the teams from lowest turnover/steal ratio to highest
# Which team has the lowest turnover/steal ratio?
dat <- arrange(dat, desc(turn_steal))
head(dat)
dat <- dat %>%
mutate(ast_game = AST / G) %>%
arrange(desc(ast_game))
head(dat)
# Create a data frame called `good_offense` of teams that scored more than
# 8700 points (PTS) in the season
good_offense <- filter(dat,PTS>8700)
summary(good_offense)
# Create a data frame called `good_defense` of teams that had more than
# 470 blocks (BLK)
good_defense <- filter(dat,BLK>470)
summary(good_defense)
# Create a data frame called `offense_stats` that only shows offensive
# rebounds (ORB), field-goal % (FG.), and assists (AST) along with the team name.
offense_stats <- select(dat,Team,ORB,FG.,AST)
head(offense_stats)
# Create a data frame called `defense_stats` that only shows defensive
# rebounds (DRB), steals (STL), and blocks (BLK) along with the team name.
defense_stats <- select(dat,Team,DRB,STL,BLK)
head(defense_stats)
setwd("C:/Users/chris/programming_skills_book/book-exercises/chapter-11-exercises/exercise-8")
# Load the `dplyr` library
library(dplyr)
# Read in the data (from `data/pupulitzer-circulation-data.csv`). Remember to
# not treat strings as factors!
dat <- read.csv("data/pulitzer-circulation-data.csv", stringsAsFactors = F)
# View in the data set. Start to understand what the data set contains
View(dat)
colnames(dat)
?str
# Use the 'str()' function to also see what types of values are contained in
# each column (you're looking at the second column after the `:`)
# Did any value type surprise you? Why do you think they are that type?
str(dat)
# Add a column to the data frame called 'Pulitzer.Prize.Change` that contains
# the difference in the number of times each paper was a winner or finalist
# (hereafter "winner") during 2004-2014 and during 1990-2003
dat$Pulitzer.Prize.Change <- dat$Pulitzer.Prize.Winners.and.Finalists..1990.2014 - dat$Pulitzer.Prize.Winners.and.Finalists..1990.2003
# Add a column to the data frame called 'Pulitzer.Prize.Change` that contains
# the difference in the number of times each paper was a winner or finalist
# (hereafter "winner") during 2004-2014 and during 1990-2003
dat$Pulitzer.Prize.Change <- dat$Pulitzer.Prize.Winners.and.Finalists..2004.2014 - dat$Pulitzer.Prize.Winners.and.Finalists..1990.2003
# What was the name of the publication that has the most winners between
# 2004-2014?
dat %>% filter(Pulitzer.Prize.Winners.and.Finalists..2004.2014 == max(Pulitzer.Prize.Winners.and.Finalists..2004.2014)) %>% select(Newspaper)
# Which publication with at least 5 winners between 2004-2014 had the biggest
# decrease(negative) in daily circulation numbers?
dat %>%
filter(Pulitzer.Prize.Winners.and.Finalists..2004.2014 >= 5) %>%
filter(Pulitzer.Prize.Change == min(Pulitzer.Prize.Change)) %>%
select(Newspaper)
View(dat)
as.numeric(dat$Change.in.Daily.Circulation..2004.2013)
dat$Change.in.Daily.Circulation..2004.2013*1
as.numeric(as.character(dat$Change.in.Daily.Circulation..2004.2013))
